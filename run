#! /bin/bash
#
# Run spectroscopy-demo
#

CONTAINER="[flywheel/ismrm-rd-demo]"

# Built to flywheel-v0 spec
FLYWHEEL_BASE=/flywheel/v0
OUTPUT_DIR=$FLYWHEEL_BASE/output

echo -e "$CONTAINER  Initiated"

# Un-tar and move the file to the output directory
tar xvzf $FLYWHEEL_BASE/*.hdf5.tgz -C $OUTPUT_DIR

# Write out the .metadata.json, which will be used by the API to set the metadata on the file. 
echo "{ \"acquisition\" : { \"files\" : [{ \"name\" : \"ismrmrd_raw.hdf5\", \"type\": \"ismrmrd\", \"measurements\": [\"Functional\"],
        \"info\" : {
            \"subjectInformation\": {
              \"patientName\": \"phantom\",
              \"patientWeight_kg\": \"70.3068\"
            },
            \"acquisitionSystemInformation\": {
              \"systemVendor\": \"SIEMENS\",
              \"systemModel\": \"Avanto\",
              \"systemFieldStrength_T\": \"1.494\",
              \"receiverChannels\": \"32\",
              \"relativeReceiverNoiseBandwidth\": \"0.79\"
            },
            \"experimentalConditions\": {
              \"H1resonanceFrequency_Hz\": \"63642459\"
            },
            \"encoding\": {
              \"trajectory\": \"cartesian\",
              \"encodedSpace\": {
                \"matrixSize\": {
                  \"x\": \"256\",
                  \"y\": \"140\",
                  \"z\": \"80\"
                },
                \"fieldOfView_mm\": {
                  \"x\": \"600\",
                  \"y\": \"328.153125\",
                  \"z\": \"160\"
                }
              },
              \"reconSpace\": {
                \"matrixSize\": {
                  \"x\": \"128\",
                  \"y\": \"116\",
                  \"z\": \"64\"
                },
                \"fieldOfView_mm\": {
                  \"x\": \"300\",
                  \"y\": \"271.875\",
                  \"z\": \"128\"
                }
              },
              \"encodingLimits\": {
                \"kspace_encoding_step_1\": {
                  \"minimum\": \"0\",
                  \"maximum\": \"83\",
                  \"center\": \"28\"
                },
                \"kspace_encoding_step_2\": {
                  \"minimum\": \"0\",
                  \"maximum\": \"45\",
                  \"center\": \"20\"
                },
                \"slice\": {
                  \"minimum\": \"0\",
                  \"maximum\": \"0\",
                  \"center\": \"0\"
                },
                \"set\": {
                  \"minimum\": \"0\",
                  \"maximum\": \"0\",
                  \"center\": \"0\"
                }
              }
            },
            \"parallelImaging\": {
              \"accelerationFactor\": {
                \"kspace_encoding_step_1\": \"1\",
                \"kspace_encoding_step_2\": \"1\"
              },
              \"calibrationMode\": \"other\"
            },
            \"sequenceParameters\": {
              \"TR\": \"4.6\",
              \"TE\": \"2.35\",
              \"TI\": \"300\"
            }
          }
      }
    ]
  }
}
" > $OUTPUT_DIR/.metadata.json


# Get a list of the files in the output directory
outputs=$(find $OUTPUT_DIR/* -maxdepth 0 -type f)

# If outputs exist, generate metadata, and exit
if [[ -z $outputs ]]
    then
        echo "$CONTAINER  No results found in output directory... Exiting"
        exit 1
    else
        cd $OUTPUT_DIR
        echo -e "$CONTAINER  Wrote: `ls`"
        echo -e "$CONTAINER  Done."
fi

exit 0
